<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[大学生细解三层架构之csharp]]></title>
    <url>%2F2019%2Fc%2F%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%2F%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BB%86%E8%A7%A3%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E4%B9%8Bcsharp%2F</url>
    <content type="text"><![CDATA[autoauto- [1. 大学生细解三层架构之csharp](#1-大学生细解三层架构之csharp)auto - [1.1. 三层分为](#11-三层分为)auto - [1.2. 新建四个项目就如上面所说三个加上一个实体类MODEL](#12-新建四个项目就如上面所说三个加上一个实体类model)auto - [1.3. 它们之间的引用关系是这样的](#13-它们之间的引用关系是这样的)auto - [1.4. 第一步要根据它们的引用关系先添加引用 如下图](#14-第一步要根据它们的引用关系先添加引用--如下图)auto - [1.5. 第二步根据它们的引用关系添加它们的命名空间 如下图](#15-第二步根据它们的引用关系添加它们的命名空间--如下图)auto - [1.6. [引用他人的对三层架构的理解](https://www.cnblogs.com/liuqifeng/p/9150254.html)结合自己的理解。](#16-引用他人的对三层架构的理解httpswwwcnblogscomliuqifengp9150254html结合自己的理解)autoauto 大学生细解三层架构之csharp我之前写过一篇三层架构的篇幅，是csharp三层架构之ATM附源码及数据库文件或许有些不尽完美，望请教。学知无涯。现在这个项目是名为“我要软考”亦用三层架构写之。不完美之处，望告知。 三层分为 BLL &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 是指对各种对象的处理，如输入的合法性，完整性，等，给UI调用DAL &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;是指对数据库操作的类（可以继承或自己创建类），给BLL调用UI &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;是指用户与系统直接交互的层，一般指 （窗体，控件）等MODEL 实体类 封装信息，便于增加删改不至于写其他代码 新建四个项目就如上面所说三个加上一个实体类MODEL BLLDALUIMODEL并将它们的class改成小写的英文，除UI之外，UI层根据自己需求命名如下图 它们之间的引用关系是这样的 BLL引用UI，和DAL UI引用BLL，MODEL DAL引用MODEL 和using System.Data.SqlClient; 第一步要根据它们的引用关系先添加引用 如下图 第二步根据它们的引用关系添加它们的命名空间 如下图 引用他人的对三层架构的理解结合自己的理解。]]></content>
      <categories>
        <category>c#</category>
        <category>三层架构</category>
      </categories>
      <tags>
        <tag>三层架构</tag>
        <tag>开源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算术运算符 面试密集区]]></title>
    <url>%2F2019%2FJS%2F%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6-%E9%9D%A2%E8%AF%95%E5%AF%86%E9%9B%86%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[算术运算符 面试密集区数学运算符 12345+ - * / + - % ++ --** 幂运算 细节 js小数运算不精确的 除数为0 （8/2=4） 8是被除数，2是除数 如果被除数是正数，得到的结果是正无穷。Infinity 如果被除数是负数得到的结果是负无穷.-Infinity。 如果被除数是0，得到结果NaN (Not a Number) typeof函数返回类型时为string isNaN函数，改函数用于判断是不是NaN，返回boolean值。 isFinite函数，该函数英语判断一个数据是不是有限的，返回boolean值 求余 %有些教程也叫求模 余数的符号，与被除数相同 幂运算1(-4)**2 得 16 其他类型使用算术运算 除加号之外的算术运算符 将原始类型转换为数字类型（自动转换）。然后进行运算。例如 boolean：true -&gt; 1,false -&gt; 0; 123var b=true;b=+b;console.log(b,typeof b); &lt;!-- 输出结果是1 ，Number --&gt; string：如果字符串內部是一个正确大的数字，直接变为数字，如果一个非数字，则得到NaN（能识别Infinitely，不能在字符串内部写表达式，会被当做文本） NaN 虽然是数字，但是他和任何数字做任何的数字运算得结果都是NaN null：null - &gt; 0 undefined: undefined - &gt; NaN 将对象类型先转换为字符串类型，然后再将该字符串转换成数字类型 对象类型 - &gt; “[object object]” 加号运算 符 拼接 1&quot;a&quot;+&quot;b&quot; 运算 11+2 转换 1-3+&quot;ab&quot; 先将-3转换为字符串 123456789101112console.log(1 + 2 * 3); // 7console.log(1+ 3 % 2); // 2console.log(""+ 3 % 2);//"1"console.log(+""+ 3 % 2); // 1console.log(+&#123;&#125; + ""); //"NaN"console.log(100 % 4 / 0); //NaNconsole .log(nul1 / null); //NaNvar a;console.log(a + &#123;&#125; + 123); //undefined[object object ]123console.log(1 ++ 2+3);//"123"console.log(&#123;&#125; * null); //NaNconsole. log(+""+ 100); //100 +"" 转换为0 作业 温度转换器， 设置一个变量 保存摄氏温度（c），将其转换为华氏温度。F=（ 9/5）c+32 利息计算器 设置变量，分别存放本金，月数，年率，计算利息。]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS算术运算符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运算符的概述]]></title>
    <url>%2F2019%2FJS%2F%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[运算符的概述第2章：变量和数据类型第3章：运算符，解决数据运算的问题，面试题密集 操作符和操作数操作符：运算符，参与运算的符号 操作数：参与运算的数据，也称为”元“ 例如三元运算 操作符不一定只有一个符号 操作符出现在不同的位置，可能具有不同的含义 121-2;-1,3; 目接触的操作符： 1234567892. ```.``` 访问符号，用于访问对象的属性 3. ```[]``` 访问符号，用于访问对象的属性 4. ```()``` 函数调用5. ```&#123;&#125;``` 储存对象## 运算符的分类按操作数数量区分1. 一元运算符：```() . 二元运算符：- / * % 13. 三元运算符： ```? : 功能区分 算术运算符（数学） 比较运算符 逻辑运算符 位运算符 其他 表达式表达式 = 操作符 + 操作数 每一个表达式都有一个运算结果，给结果叫做返回值，返回值得类型叫做返回类型 所有的表达式都可以当做数据使用 =该表达式，返回赋值的结果 .属性访问表达式，返回的是属性的值 []属性访问表达式，返回的是属性的值 ()函数调用表达式，返回的结果取决于函数的运行 如果是一个声明+赋值的表达式，返回结果为undefined； console.log 函数调用的返回结果为undefined chrome游览器控制的环境是REPl环境REPL：Read Eval Print Loop ，读，执行，打印，，循环当直接在控制台书写代码时，除了运行代码之外，还会输出该表达式的返回值]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS基础</tag>
        <tag>运算符概述</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用七牛云图片服务器，不管是自己博客用还是用来干嘛，都是一个很好地选择]]></title>
    <url>%2F2019%2F%E6%95%99%E7%A8%8B%2F%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E4%B8%8D%E7%AE%A1%E6%98%AF%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E7%94%A8%E8%BF%98%E6%98%AF%E7%94%A8%E6%9D%A5%E5%B9%B2%E5%98%9B%EF%BC%8C%E9%83%BD%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BE%88%E5%A5%BD%E5%9C%B0%E9%80%89%E6%8B%A9%2F</url>
    <content type="text"><![CDATA[七牛云传送门 下面就是正题了 复制外链后，就可以使用这个链接了，不用担心本地文件怎么怎么样，方便不少。 七牛云传送门]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>七牛云图片服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习JS中，不同的数据类型的数据的书写方式]]></title>
    <url>%2F2019%2FJS%2F%E7%AC%94%E8%AE%B0%2F%E5%AD%A6%E4%B9%A0JS%E4%B8%AD%EF%BC%8C%E4%B8%8D%E5%90%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9A%84%E4%B9%A6%E5%86%99%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[原始类型(基本类型) 原始类型指不可再细分的类型 1.数字类型number直接书写即可 了解:数字类型可以加上前缀，来表示不同的进制0:表示8进制0x:表示16进制0b: 表示2进制 2.字符串类型string字符串:一长串文本(0个或多个)单引号 ‘双引号 “飘 ` 叫做模板字符串在字符串中，如何表示一个特殊字符，可以使用转义符()代码如下 123456789&lt;script&gt; // 如果用单引号开始那么就用单引号结束，双引号，也是一样的。console.log( `hello \`world\``);console.log(&quot;hello \&quot;world\&quot;&quot;); console.log(&quot;hello \\&quot;);console .log(&quot;hello \nworld&quot;); // \n表示换行符console. log(&quot;\t12\t34\n\ta\tbcd&quot;); // \t表示制表符console. log(``hello `\` //这个表示 `&quot;world&quot;` ); 3.布尔类型boolean布尔类型用于表达真或假两种状态true,表示真false,表示假 4. undefined类型表示未定义，不存在。只有一种数据书写方式: undefined 5. null类型表示空，不存在。只有一种数据书写方式:nul1 区分某些长数字和字符串:如果按照数字的方式阅读，则使用数字类型;否则使用字符串类型 引用类型 引用类型有两种: 对象object (事物， 东西，玩意儿可以认为，对象，是由多个基本类型组合而成。书写对象的格式见下面代码1 12345678910111213141516&lt;script&gt;console.log(typeof 231); //控制台显示 numberconsole.log(&#123; name : &quot;西成&quot; , nickName: &quot;成西&quot;， age :18, gender: true, //true表示男， false表示女 address: &#123; country : &quot;中国&quot;; province : &quot;新疆&quot;，; city: &quot;乌鲁木齐&quot;; detail: &quot;那嘎达二街11号&quot;;&#125;, girlFriend: undefined;&#125;);&lt;/script&gt; 函数(后续章节讲解) 得到数据的类型在数据前加上typeof js的bug (特征) : typeof null,得到的是object]]></content>
      <categories>
        <category>JS</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JS数据类型</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS之安装代码编辑器]]></title>
    <url>%2F2019%2FJS%2F%E7%AC%94%E8%AE%B0%2FJS%E4%B9%8B%E5%AE%89%E8%A3%85%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[安装代码编辑器（VSCode： Visual Studio Code）要是还没下载的话，点击vs code官网windows 64位下载中间这个。 安装好后就是安装语言插件（英文变中文） 我用这个编辑器来学JS，所以装一些比较常用的插件 VSCode Visual Studio Code是刚出没有多久的，感觉拿来练练手。第一次安装的时候，有点吃惊，一下就安装好，不需要弄什么。很给力啊这次微软。 安装常用的插件: 1.语言包: Chinese (Simplified) Language Pack for Visual Studio Code Beautify:美化代码的作用 vscode- icons: 美化图标 Live Server: 自动搭建本地服务器，启动网页 Markdown Preview Enhanced: markdown的增强插件 Markdown All in One:在markdown适用快捷键 Markdown toc 自动生成目录]]></content>
      <categories>
        <category>JS</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JS代码编辑器</tag>
        <tag>vs code安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[游览器大战及JS的起源，node.js由来]]></title>
    <url>%2F2019%2FJS%2F%E7%AC%94%E8%AE%B0%2F%E6%B8%B8%E8%A7%88%E5%99%A8%E5%A4%A7%E6%88%98%E5%8F%8AJS%E7%9A%84%E8%B5%B7%E6%BA%90%EF%BC%8Cnode.js%E7%94%B1%E6%9D%A5%2F</url>
    <content type="text"><![CDATA[游览器从何而来第一款游览器1994年，网景浏览器（Netscape ）是一个是由 Netscape 通信公司开发的网页浏览器。一开始只能做静态页面，只能写html页面（css1996年发布的）， LiveScript的诞生 1995年，网景公司决定在游览器中加入一门语言，可以作交互效果，提高用户体验。最终决定聘请Brendan Eich独立开发一门新的语言，十天后，新的语言诞生了。 LiveScript的更名成JavaScript LiveScript,后因和Sun公司合作，因市场宣传需要改名JavaScript。后来Sun公司被Oracle收购，JavaScript版权归Oracle所有。 网景公司打算在游览器中加入网络操作系统，这是会影响到微软的利益，引起了微软的注意。（微软找网景谈，没成） Brendan Eich有次出席js开发者大会说道，以后要是设计语言，千万不要命名权交给商业公司，不能出于商业考虑而命名。。。 第一次游览器大战 1995年微软发布IE游览器。 js语言推出后，网景获得了极大的竞争优势。（微软有找网景谈说收购。微软慌了，也没成）微软对js语言进行反编译借鉴js语言推出了JScript，VBScript。 第一次游览器大战是标准之争 1997网景公司将JavaScript1.1版本提交给ECMA（欧洲信息和通信系统标准化协会）并没有引起谁的注意，但是没想到的是恰恰影响到了我们。不过那时候竞争太激烈了，标准基本一年一发布，他们两家公司基本上一周一版本。微软杀手锏 IE3发布，并绑定windows操作系统。网景的份额下滑的很厉害。于是1998年网景公司，被收购 第一次游览器大战微软赢了。JS标准称为ES ECMA收录了JavaScript并提交给ISO，经过修改，成为了第一个js的标准版本，成为ECMAScript，简称“”ES“”。 悄悄话，微软相推出了IE4，IE5，IE6（windows xp）之后微软决定解散游览器团队（自废武功吗？） 第二次游览器大战 MOzilla基金会Brendan Eich带领团队成立MOzilla基金会，并决定将网景游览器开源，长时间内，世界的技术爱好者，对网景游览器进行维护和打补丁。 MOzilla推出了Firefox游览器（火狐）2008年 谷歌推出了Chrome游览器，苹果推出了Safari，ASA推出了Opera Chrome游览器搭载了js执行引擎v8（v8引擎，可以将js代码直接转换为字节码，理论上js代码执行速度接近汇编语言） 于是，js具备了编写大型应用程序的能力，甚至服务器应用 node.js的由来Ryan Dahl 准备写一个服务器端的框架，直接使用v8(开源)引擎完成了该框架，称为 node.js v8引擎将JS的执行推向了一个新的台阶ES的语言标准： 不涉及语言的运行环境，正是因为ES避免了运行环境，就让ES有机会在各种环境中执行。ES称为了通用的编程语言。 ES标准的发展 ES1,1997年ES2,1998年ES3 ,1999年ES4, 并没有发布，所以说没有ES4这个版本ES5,2009年 (习惯上，不再区分JavaScript “js”和ECMAScript “ES”)，，（IE6开始落后标准，但他的团队已经解散了）ES6,2015年 ECMA宣布，从ES6开始，使用年号作为版本号。ES6称为ES2015ES7, 在校大学生暑假学习笔记，知识点来源于哔哩哔哩视频渡一。]]></content>
      <categories>
        <category>JS</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JS起源</tag>
        <tag>node.js由来</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java抽象类里面的成员，和接口内的成员 抽象类与接口系列之四]]></title>
    <url>%2F2019%2Fjava%2Fjava%E6%8A%BD%E8%B1%A1%E7%B1%BB%E9%87%8C%E9%9D%A2%E7%9A%84%E6%88%90%E5%91%98%EF%BC%8C%E5%92%8C%E6%8E%A5%E5%8F%A3%E5%86%85%E7%9A%84%E6%88%90%E5%91%98-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445package java_10;public class java_10_4 &#123; public static void main(String[] args) &#123; // B4 b=new B4(); 错误 // IC4 ic4=new IC4() &#123; // 正确，这是匿名内部类，属于IC4的子类 // // @Override // public void meth_02() &#123; // // TODO 自动生成的方法存根 // // &#125; // &#125;; // G3 g3 = new G3(); g3.meth_01(); g3.meth_02(); &#125;&#125;class A4 &#123;&#125;abstract class B4 &#123; public abstract void meth_01();&#125;interface IC4 &#123; void meth_02(); // 默认public abstract&#125;class G3 extends B4 implements IC4 &#123; public void meth_01() &#123; System.out.println(&quot;抽象类里面有成员都必须实现&quot; + &quot;, 抽象类里面没有非抽象成员&quot; + &quot;\n-----------------------------------------------------------------&quot;); &#125; @Override public void meth_02() &#123; // TODO 自动生成的方法存根 System.out.print(&quot;接口里可以有非抽象成员&quot; + &quot;, 接口里面成员都必须实现&quot;); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java抽象类与接口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java 抽象类和接口的继承 抽象类与接口系列之三]]></title>
    <url>%2F2019%2Fjava%2Fjava-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BB%A7%E6%89%BF-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%89%2F</url>
    <content type="text"><![CDATA[抽象类只能被单继承，而接口可以被多继承。 一个类中可以继承单个抽象类和多个接口 。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889package java_10;public class java_10_3 &#123; public static void main(String[] args) &#123; // TODO 自动生成的方法存根 D3 d3 = new D3(); d3.meth_Abtract_IA3(); d3.meth_Abtract_IB3(); E3 e3=new E3(); e3.meth_Abtract(); e3.meth_Abtract_IA3(); F3 f3=new F3(); f3.meth_Abtract(); f3.meth_Abtract_IA3(); f3.meth_Abtract_IB3(); &#125;&#125;// 抽象类中可以有非抽象成员，而接口不能有非抽象的成员abstract class A3 &#123; public abstract void meth_Abtract(); public void meth_UnAbtract() &#123; &#125;&#125;// 先定义两个接口，再下面继承两个接口interface IA3&#123; public abstract void meth_Abtract_IA3(); //public void Meth_Test()&#123;&#125; //不能有非抽象的成员&#125;interface IB3 &#123; public abstract void meth_Abtract_IB3();&#125;// 抽象类和接口的继承 关键字不同，extends，implementsclass C3 extends A3 &#123; // 继承 A3抽象类,只能单继承 public void meth_Abtract() &#123; &#125;&#125;class D3 implements IA3, IB3 &#123; // 继承 IA3，IB3 接口；接口可以多继承 @Override // 每继承接口都要覆盖，实现方法 public void meth_Abtract_IA3() &#123; // TODO 自动生成的方法存根 System.out.println(&quot;class D3 继承IA3接口&quot;); &#125; @Override public void meth_Abtract_IB3() &#123; // TODO 自动生成的方法存根 System.out.println(&quot;class D3 继承IB3接口&quot;+&quot;\n------------------------&quot;); &#125;&#125;class E3 extends A3 implements IA3 &#123; public void meth_Abtract() &#123; System.out.println(&quot;class E3 继承A3抽象类&quot;); &#125; public void meth_Abtract_IA3() &#123; System.out.println(&quot;class E3 继承IA3接口&quot;+&quot;\n------------------------&quot;); &#125;&#125; class F3 extends A3// F3 //抽象类的继承只支持单继承，而接口允许多继承 implements IA3, IB3 &#123; public void meth_Abtract() &#123; System.out.println(&quot;class F3 继承A3抽象类&quot;); &#125; @Override public void meth_UnAbtract() &#123; // TODO 自动生成的方法存根 System.out.println(&quot;重写A3里面的非抽象类方法：public void meth_UnAbtract()&quot;); super.meth_UnAbtract(); &#125; public void meth_Abtract_IA3() &#123; System.out.println(&quot;class F3 继承IA3接口&quot;); &#125; public void meth_Abtract_IB3() &#123; System.out.println(&quot;class F3 继承IB3接口&quot;); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java抽象类与接口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java interface（接口）的使用 抽象类与接口系列之二]]></title>
    <url>%2F2019%2Fjava%2Fjava-interface%EF%BC%88%E6%8E%A5%E5%8F%A3%EF%BC%89%E7%9A%84%E4%BD%BF%E7%94%A8-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[什么是Java的接口？ 其实接口的概念较为抽象，可以理解为接口是一系列方法和特征的集合。方法和特征是类的组成部分，如果从编程的角度而言，Java的接口可以对应这Java中特定的语法结构。Java接口与Java抽象类是不一样的，抽象类可以实现某些方法，而接口则不能。下面，从接口的概念和功能上进一步详细描述其存在的意义。 那么Java在类中定义一个接口有什么意义呢？ 类所描述的是一个实体，包含试题的状态和动作。一个实体能发出的动作由接口来定义。那么在类中对一个借口来定义，从本质上讲，跟在抽象类中定义一个接口一样，也体现着它的抽象性，即它是可以变化的。从面向对象的思想来看，要封装好变化的部分。这可能涉及到的涉及模式：模板涉及模式/命令涉及模式，在这个util类里面封装了会改变的Worker，可以理解为，util类里面有自己的算法：一部分是固定的，而另外一部分是可变的，尚学堂陈老师指出这个可变的部分就变成了一个接口，接口则是特殊的抽象类，worker可能在不同的工作环境有不同的工作方式，例如work()、onvaction()等等。 因此在类中定义一个接口是有其必要性的，它代表着一种编程思想，定义接口的目的是让代码有更强的可扩展性。 那么为何要定义接口？以及接口有何意义呢？那么关于接口的意义可以从以下几点来进行说明： 1、定义接口的重要性：在Java编程，abstract class 和interface是支持抽象类定义的两种机制。正是由于这两种机制的存在，才使得Java成为面向对象的编程语言。 2、定义接口有利于代码的规范：对于一个大型项目而言，架构师往往会对一些主要的接口来进行定义，或者清理一些没有必要的接口。这样做的目的一方面是为了给开发人员一个清晰的指示，告诉他们哪些业务需要实现；同时也能防止由于开发人员随意命名而导致的命名不清晰和代码混乱，影响开发效率。 3、有利于对代码进行维护：比如你要做一个画板程序，其中里面有一个面板类，主要负责绘画功能，然后你就这样定义了这个类。可是在不久将来，你突然发现现有的类已经不能够满足需要，然后你又要重新设计这个类，更糟糕是你可能要放弃这个类，那么其他地方可能有引用他，这样修改起来很麻烦。如果你一开始定义一个接口，把绘制功能放在接口里，然后定义类时实现这个接口，然后你只要用这个接口去引用实现它的类就行了，以后要换的话只不过是引用另一个类而已，这样就达到维护、拓展的方便性。 4、保证代码的安全和严密：一个好的程序一定符合高内聚低耦合的特征，那么实现低耦合，定义接口是一个很好的方法，能够让系统的功能较好地实现，而不涉及任何具体的实现细节。这样就比较安全、严密一些，这一思想一般在软件开发中较为常见。 作者：老刘 链接 上代码 12345678910111213141516171819202122232425262728package java_10;public class java_10_2 &#123; public static void main(String[] args) &#123; // TODO 自动生成的方法存根 D2 d = new D2(); d.meth(); &#125;&#125;interface IA2 &#123; // 接口内部:重在行为规则（抽象方法），接口的价值：应该以遵守或采纳（接口的子类）的范围来决定。 void meth();// 默认为 public abstract。 // 接口有数据，数据是常量。 double PI = 3.14; // 默认为 public static final final只初始化一次，不能再次初始化即常量的意思&#125;class D2 implements IA2 &#123; // implements 执行 @Override public void meth() &#123; // TODO 自动生成的方法存根 System.out.println(&quot;D2.meth() &quot;); System.out.println(&quot;啦啦啦啦德玛西亚&quot;); System.out.println(&quot;D2.PI =&quot; + D2.PI + &quot; //这是一个接口里的常量&quot;); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java interface（接口）</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[csharp三层架构之ATM附源码及数据库文件]]></title>
    <url>%2F2019%2Fc%2Fcsharp%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E4%B9%8BATM%E9%99%84%E6%BA%90%E7%A0%81%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[这是我之前拿来交期末作业的作品这就分享一下下载链接，和接下来的博文下载链接可以直接下载博文可以传阅，欢迎大佬评论。这是百度网盘的下载地址https://pan.baidu.com/s/1w0pdNb3E4szmq2zHEbrMsA 首先这个ATM是使用三层架构来写的，关于三层架构我是在csdn上学的。想要具体了解三层架构的话可以游览一下链接。其次需要了解三层架构的相互之间的关系及引用。 https://www.cnblogs.com/liuqifeng/p/9150254.html 最后才开始以下的实践。 说一下思路：ATM的主要功能是存钱，取钱，转账，查询，交易明细。 还有就是我这个设计数据库的时候没有考虑周到，给的数据类型时整型的。这是我的失误，你们可以设计成浮点的类型。 查询，需要登录后才能查询。存钱，要怎样才能存钱？起码需要一个账户，然后存钱的金额不能是负数。取钱，取钱的金额不能为负却不能大于本金。转账，要怎样才能进行转账？转账需要两个账户，还需要转账的金额（金额不能为负数，不能大于本金）。交易明细，记录各各操作的内容，账号及金额附上时间。 先贴数据库的图这是用户表字段设计 这是用户表的数据这是数据表字段的设计，SFZ是用来找回密码的，MONEY是用来储存钱的，RECORD是用来记录交易明细的。这是数据表的数据这是方案里的项目，建四个项目，以及各类，窗体。他们之间的引用关系在上文的链接中有详细解说。 MODEL项目里的model.cs代码如下 123456789101112131415161718using System;using System.Collections.Generic;using System.Linq;using System.Text;//bll引用ui，和dal//ui引用bll，moodel//dal引用model 和usingnamespace MODEL&#123; public class model &#123; public string id &#123; get; set; &#125; public string pwd &#123; get; set; &#125; public string sfz &#123; get; set; &#125; public string money &#123; get; set; &#125; public string record &#123; get; set; &#125; &#125;&#125; DAL项目中的dal.cs代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Data.SqlClient;using MODEL;namespace DAL&#123; public class dal &#123; string count = &quot;server=.;DATABASE=MyAtm;Integrated Security=true;&quot;;//连接数据库字符串 /*登陆*/ public model select(string ID, string PWD) &#123; model mm = null; try &#123; SqlConnection con=new SqlConnection(count); con.Open(); //string sql = &quot;select * from data where id=&apos;&quot;+ID+&quot;&apos;&quot;; SqlCommand cmd = new SqlCommand(&quot;select * from userr WHERE ID=&apos;&quot;+ID+&quot;&apos;&quot;,con); SqlDataReader dr=cmd.ExecuteReader(); if (dr.Read()) &#123; if (mm == null) //这个必须写 &#123; mm = new model(); &#125; mm.id = dr[&quot;ID&quot;].ToString().Trim(); mm.pwd = dr[&quot;pwd&quot;].ToString().Trim(); &#125; con.Close(); &#125; catch (Exception ex)&#123; &#125; return mm; &#125; /*修改密码*/ public model update(string ID, string SFZ,string PWD) &#123; model mm = null; try &#123; SqlConnection con = new SqlConnection(count); con.Open(); string sql = &quot;select * from data where id=&apos;&quot; + ID + &quot;&apos;&quot;; SqlCommand cmd = new SqlCommand(sql, con); SqlDataReader dr = cmd.ExecuteReader(); if (dr.Read()) &#123; if (mm == null) &#123; mm = new model(); &#125; mm.id = dr[&quot;id&quot;].ToString().Trim(); mm.sfz = dr[&quot;sfz&quot;].ToString().Trim(); dr.Close(); string sql0 = &quot;update userr set pwd=&apos;&quot; + PWD + &quot;&apos;where id=&apos;&quot; + ID + &quot;&apos;&quot;; SqlCommand cmd1 = new SqlCommand(sql0, con); int n = cmd1.ExecuteNonQuery(); mm.pwd = PWD; con.Close(); &#125; &#125; catch (Exception ex)&#123; &#125; return mm; &#125; /*查询余额*/ public model money_select(string ID)//money &#123; model mm = new model(); SqlConnection con = new SqlConnection(count); string sql = &quot;select * from data where id=&apos;&quot;+ID+&quot;&apos;&quot;; con.Open(); SqlCommand cmd = new SqlCommand(sql,con); SqlDataReader dr=cmd.ExecuteReader(); if (dr.Read()) &#123; if (mm==null) &#123; mm = new model(); &#125; mm.money=dr[&quot;money&quot;].ToString().Trim(); &#125; con.Close(); return mm; &#125; /*取款*/ public int i=0; public string DT=&quot;&quot;; /*用来储存当前操作的时间，与金额*/ public model draw(string ID,string DRAW) &#123; model mm = null; string DT_sql = &quot;select * from DATA where id=&apos;&quot;+ID+&quot;&apos;&quot;; SqlConnection DT_con = new SqlConnection(count); DT_con.Open(); SqlCommand DT_cmd = new SqlCommand(DT_sql, DT_con); SqlDataReader DT_dr = DT_cmd.ExecuteReader(); model i_mm=new model(); if (DT_dr.HasRows) &#123; DT_dr.Read(); /*-----------先读取之前转账的信息------------*/ DT += DT_dr[&quot;RECORD&quot;].ToString().Trim(); i_mm.money = DT_dr[&quot;MONEY&quot;].ToString().Trim(); &#125; DT_dr.Close(); DT_con.Close(); if (DRAW == &quot;&quot; || Convert.ToInt32(DRAW) &gt; Convert.ToInt32(i_mm.money)) &#123; //model i_mm = null; mm = i_mm; return mm; &#125; else &#123; DT += &quot;\n&quot; + DateTime.Now.ToString(&quot;yyy-M-d H:m:s&quot;); SqlConnection con = new SqlConnection(count); con.Open(); string sql = &quot;select * from data where id=&apos;&quot; + ID + &quot;&apos;&quot;;//这个查询账号的信息，再进行读取余额 SqlCommand cmd = new SqlCommand(sql, con); SqlDataReader dr = cmd.ExecuteReader(); if (dr.Read()) &#123; i = Convert.ToInt32(dr[&quot;money&quot;].ToString().Trim());//自己的本钱/ &#125; con.Close(); int k = i - Convert.ToInt32(DRAW);//自己的本钱减去要取出来的钱，然后把k更新到数据可以里 //2018-12-6 14:3:53已取出100 2018-12-6 14:6:24 已取出10元 DT += &quot; 已取出&quot; + DRAW + &quot;元&quot;; string sqlup = &quot;update data set money=&apos;&quot; + k + &quot;&apos;,RECORD=&apos;&quot; + DT + &quot;&apos;where id=&apos;&quot; + ID + &quot;&apos;&quot;;//执行sql语句 //string sql02 = &quot;update DATA set mory=&apos;&quot; + k + &quot;&apos;,RECORD=&apos;&quot; + NOW + &quot;&apos;where ID=&apos;&quot; + textBox1.Text.Trim() + &quot;&apos;&quot;; con.Open(); SqlCommand cmdup = new SqlCommand(sqlup, con); int n = cmdup.ExecuteNonQuery(); con.Close(); mm = null; mm = new model(); mm.money = Convert.ToString(i); //要把已经计算好的金额更新到数据库中 return mm; &#125; &#125; /*储存*/ public model Storage(string ID, string Money) &#123; string DT_sql = &quot;select * from DATA&quot;; SqlConnection DT_con = new SqlConnection(count); DT_con.Open(); SqlCommand DT_cmd = new SqlCommand(DT_sql, DT_con); SqlDataReader DT_dr = DT_cmd.ExecuteReader(); int m = 0; if (DT_dr.HasRows) &#123; DT_dr.Read(); /*-----------先读取之前转账的信息------------*/ DT += DT_dr[&quot;RECORD&quot;].ToString().Trim(); m = Convert.ToInt32(DT_dr[&quot;MONEY&quot;].ToString().Trim()); &#125; DT_dr.Close(); DT_con.Close(); DT += &quot;\n&quot; + DateTime.Now.ToString(&quot;yyy-M-d H:m:s&quot;); if (Money == &quot;&quot;) &#123; model i_mm = null; return i_mm; &#125; else &#123; //model mm = new model(); model mm = null; SqlConnection con = new SqlConnection(count); con.Open(); string sql = &quot;select * from data where id=&apos;&quot; + ID + &quot;&apos;&quot;;//这个查询账号的信息，再进行读取余额 SqlCommand cmd = new SqlCommand(sql, con); SqlDataReader dr = cmd.ExecuteReader(); if (dr.Read()) &#123; i = Convert.ToInt32(dr[&quot;money&quot;].ToString().Trim());//自己的本钱/ &#125; con.Close(); int k = i + Convert.ToInt32(Money);//自己的本钱减去要取出来的钱，然后把k更新到数据可以里 DT += &quot; 已存入&quot; + Money + &quot;元&quot;; string sqlup = &quot;update data set money=&apos;&quot; + k + &quot;&apos;,RECORD=&apos;&quot;+DT+&quot;&apos;where id=&apos;&quot; + ID + &quot;&apos;&quot;;//执行sql语句 con.Open(); SqlCommand cmdup = new SqlCommand(sqlup, con); int n = cmdup.ExecuteNonQuery(); con.Close(); mm = null; mm = new model(); mm.money = Convert.ToString(k); //要把已经计算好的金额更新到数据库中 return mm; &#125; &#125; /*转账*//*没有卡号能减少自己的本金，没有金额会报错*/ int n; public model T_accounts(string ID, string YouID, string Ta) &#123; /*有这账号，没有金额报错，会报错*///ok /*，没有账号，会提示没有这个账号，但是有金额可以转账成功*/ string Ta_sql = &quot;select * from DATA&quot;; SqlConnection Ta_con = new SqlConnection(count); Ta_con.Open(); SqlCommand Ta_cmd = new SqlCommand(Ta_sql, Ta_con); SqlDataReader Ta_dr = Ta_cmd.ExecuteReader(); int m = 0; if (Ta_dr.HasRows) &#123; Ta_dr.Read(); /*-----------先读取之前转账的信息------------*/ DT += Ta_dr[&quot;RECORD&quot;].ToString().Trim(); m = Convert.ToInt32(Ta_dr[&quot;MONEY&quot;].ToString().Trim()); &#125; Ta_dr.Close(); Ta_con.Close(); DT += &quot;\n&quot; + DateTime.Now.ToString(&quot;yyy-M-d H:m:s&quot;); if (Ta == &quot;&quot;||YouID==&quot;&quot; ||Convert.ToInt32(Ta) &gt; Convert.ToInt32(m)) &#123; model mm = null; return mm; &#125; else &#123; model mm = new model(); mm.id = YouID; SqlConnection con = new SqlConnection(count); con.Open(); string sql = &quot;select * from data where id=&apos;&quot; + ID + &quot;&apos;&quot;; SqlCommand cmd = new SqlCommand(sql, con); SqlDataReader dr = cmd.ExecuteReader(); if (dr.Read()) &#123; mm.money = dr[&quot;money&quot;].ToString().Trim();//获取自己的余额 dr.Close(); &#125; /*n相当于自己的余额减去转账的金额--然后把这个n更新到数据库里面*/ DT += &quot; 已转入&quot; + YouID + &quot;：&quot;+Ta+&quot;元&quot;; n = Convert.ToInt32(mm.money) - Convert.ToInt32(Ta); string n_sql = &quot;update data set money=&apos;&quot; + n + &quot;&apos;,RECORD=&apos;&quot;+DT+&quot;&apos;where id=&apos;&quot; + ID + &quot;&apos;&quot;; SqlCommand n_cmd = new SqlCommand(n_sql, con); int i = n_cmd.ExecuteNonQuery(); string m_sql = &quot;select * from data where id=&apos;&quot; + YouID + &quot;&apos;&quot;; SqlCommand m_cmd = new SqlCommand(m_sql, con); SqlDataReader m_dr = m_cmd.ExecuteReader(); if (m_dr.Read()) &#123; mm.money = &quot;&quot;; mm.money = m_dr[&quot;money&quot;].ToString().Trim();//获取自己的余额 &#125; m_dr.Close(); int k_1 = Convert.ToInt32(mm.money); int k_2= Convert.ToInt32(Ta); k_1 += k_2; string q_sql = &quot;update data set money=&apos;&quot; + k_1 + &quot;&apos;where id=&apos;&quot; + YouID + &quot;&apos;&quot;; SqlCommand q_cmd = new SqlCommand(q_sql, con); int j = q_cmd.ExecuteNonQuery(); con.Close(); return mm; &#125; &#125; /*记录*/ public model record(string ID) &#123; model mm = new model(); SqlConnection con = new SqlConnection(count); string sql = &quot;select * from data where id=&apos;&quot; + ID + &quot;&apos;&quot;; con.Open(); SqlCommand cmd = new SqlCommand(sql, con); SqlDataReader dr = cmd.ExecuteReader(); if (dr.Read()) &#123; if (mm == null) &#123; mm = new model(); &#125; mm.record = dr[&quot;RECORD&quot;].ToString().Trim(); &#125; con.Close(); return mm; &#125; &#125;&#125; BLL中的bll.cs代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123using System;using System.Collections.Generic;using System.Linq;using System.Text;using MODEL;namespace BLL&#123; public class bll &#123; //登录方法 public int select(string ID, string PWD) &#123; DAL.dal dal = new DAL.dal(); model mm = dal.select(ID, PWD); if (mm != null &amp;&amp; mm.id == ID) &#123; if (mm.pwd == PWD) &#123; return 0;//登陆成功 &#125; return 1;//密码错误 &#125; return 2;//没有这个账号 &#125; //修改密码 public int update(string ID, string SFZ,string PWD) &#123; DAL.dal dal = new DAL.dal(); model mm = dal.update(ID,SFZ,PWD); if (mm !=null &amp;&amp; mm.id==ID) &#123; if (mm.sfz==SFZ) &#123; return 0; &#125; return 1; &#125; return 2; &#125; //查询余额 public string money_select(string ID) &#123; DAL.dal dal = new DAL.dal(); model mm = dal.money_select(ID); return mm.money; //余额 &#125; //取款 public int draw(string ID,string DRAW) &#123; DAL.dal dal = new DAL.dal(); model mm = dal.draw(ID,DRAW); if (DRAW == &quot;&quot;) &#123; return 2;//不能为空 &#125; else &#123; BLL.bll bll = new BLL.bll(); if (DRAW!=null) &#123; if(Convert.ToInt32(DRAW)&gt;Convert.ToInt32(mm.money))//100&gt;1 &#123; return 1; &#125; return 0; //要取款的金额不能大于余额或小于负数 &#125; return 2; &#125; //取款成功 &#125; /*储存*/ public int Storage(string ID, string Money) &#123; DAL.dal dal = new DAL.dal(); model mm = dal.Storage(ID,Money); if (Money == &quot;&quot;) &#123; return 1;//不能为空 &#125; else &#123; //int i = Convert.ToInt32(mm.money); BLL.bll bll = new BLL.bll(); //int m = Convert.ToInt32(bll.money_select(ID)); return 0; &#125; &#125; /*转账*/ public int T_accounts(string ID, string YouID, string Ta) &#123; DAL.dal dal = new DAL.dal(); model mm = dal.T_accounts(ID,YouID,Ta); if (Ta==&quot;&quot;&amp;&amp;YouID==&quot;&quot;) &#123; return 2;//对方帐号和要转账的金额不能为空 &#125; //int i = Convert.ToInt32(mm.money); BLL.bll bll = new BLL.bll(); int m = Convert.ToInt32(bll.money_select(ID));//查询余额 if(mm!=null&amp;&amp;mm.id==YouID&amp;&amp;Ta!=null&amp;YouID!=null) &#123; if (Convert.ToInt32(Ta)&gt;m) &#123; return 0; //要转账的金额不能大于余额 &#125; return 1; //转账成功 &#125; return 2; //没有这个账号 &#125; /*交易明细*/ public string Record(string ID) &#123; DAL.dal dal = new DAL.dal(); model mm = dal.record(ID); return mm.record; &#125; &#125;&#125; ul层的窗体界面如图接下来是ul层中form1（登陆）的代码如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Windows.Forms;using MODEL;namespace 三层架构之ATM&#123; public partial class Form1 : Form &#123; public Form1() &#123; InitializeComponent(); &#125; private void button1_Click(object sender, EventArgs e) &#123; label1.Text = &quot;卡号：&quot;; label2.Text = &quot;密码：&quot;; button1.Text = &quot;登陆&quot;; button2.Text = &quot;找回&quot;; string ID = textBox1.Text; string PWD = textBox2.Text; //BLL.USERADO bb = new BLL.USERADO();//先实例化逻辑层 BLL.bll bb=new BLL.bll(); int uu = bb.select(ID,PWD); if (uu==0) &#123; Form3 f3 = new Form3(textBox1.Text); label1.Visible = false; label2.Visible = false; button1.Visible = false; button2.Visible = false; textBox1.Visible = false; textBox2.Visible = false; f3.MdiParent = this; f3.Show(); MessageBox.Show(&quot;登陆成功&quot;); &#125; else if(uu==1) &#123; MessageBox.Show(&quot;密码错误&quot;); &#125; else if(uu==2) &#123; MessageBox.Show(&quot;没有这个账号&quot;); &#125; &#125; private void button2_Click(object sender, EventArgs e) &#123; label1.Visible = false; label2.Visible = false; button1.Visible = false; button2.Visible = false; textBox1.Visible = false; textBox2.Visible = false; Form2 f2 = new Form2(this); f2.MdiParent = this; f2.Show(); &#125; private void Form1_Load(object sender, EventArgs e) &#123; this.IsMdiContainer = true; textBox2.UseSystemPasswordChar = true; &#125; private void button3_Click(object sender, EventArgs e) &#123; label1.Visible = false; label2.Visible = false; button1.Visible = false; button2.Visible = false; textBox1.Visible = false; textBox2.Visible = false; Form2 f2 = new Form2(); f2.Show(this); &#125; &#125;&#125; form2(找回)的代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Windows.Forms;namespace 三层架构之ATM&#123; public partial class Form2 : Form &#123; Form1 _form; public Form2() &#123; InitializeComponent(); textBox3.UseSystemPasswordChar = true; &#125; public Form2(Form1 form) &#123; InitializeComponent(); _form = form;//得到传过来的Form1实例 &#125; string txt; public Form2(string str) &#123; InitializeComponent(); txt = str; &#125; private void button1_Click(object sender, EventArgs e) &#123; //textBox1.Text = txt; //textBox1.ReadOnly = true; string ID = textBox1.Text; string PWD = textBox3.Text; string SFZ = textBox2.Text; BLL.bll bb = new BLL.bll(); int uu = bb.update(ID,SFZ,PWD); if (uu==0) &#123; MessageBox.Show(&quot;修改成功&quot;); &#125; if (uu == 1) &#123; MessageBox.Show(&quot;身份证错误&quot;); &#125; if (uu == 2) &#123; MessageBox.Show(&quot;没有这个账号&quot;); &#125; &#125; private void button2_Click(object sender, EventArgs e) &#123; Form1 f1=new Form1(); f1.Owner=this; f1.label1.Visible = true; f1.label2.Visible = true; f1.button1.Visible = true; f1.button2.Visible = true; f1.textBox1.Visible = true; f1.textBox2.Visible = true; //button3.Visible = true; f1.Show(); _form.Hide(); &#125; &#125;&#125; form3(功能)代码如下using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Windows.Forms;using MODEL;namespace 三层架构之ATM&#123; public partial class Form3 : Form &#123; public Form3() &#123; InitializeComponent(); &#125; string txt; public Form3(string str) &#123; InitializeComponent(); txt = str; &#125; /*查询余额*/ private void button1_Click(object sender, EventArgs e) &#123; label1.Text = &quot;卡号：&quot;; label2.Text = &quot;余额：&quot;; label2.Visible = true; string ID = textBox1.Text; textBox2.Visible = true; label3.Visible = false; textBox3.Visible = false; BLL.bll bll = new BLL.bll(); string uu = bll.money_select(ID); textBox2.Text = uu; &#125; private void Form3_Load(object sender, EventArgs e) &#123; textBox1.ReadOnly = true; textBox1.Text = txt; &#125; /*取款*/ private void button2_Click(object sender, EventArgs e) &#123; label1.Text = &quot;卡号：&quot;; label2.Text = &quot;金额：&quot;; label2.Visible = true; label1.Visible = true; textBox1.Visible = true; textBox1.Text = txt; string ID =textBox1.Text; string DRAW =textBox2.Text; BLL.bll bll = new BLL.bll(); int uu = bll.draw(ID,DRAW); if (uu==0) &#123; MessageBox.Show(&quot;取款成功&quot;); &#125;if(uu==1) &#123; MessageBox.Show(&quot;输入的金额不能大于余额&quot;); &#125;if(uu==2) &#123; MessageBox.Show(&quot;要取款的金额不能为空&quot;); &#125; &#125; private void button1_MouseLeave(object sender, EventArgs e) &#123; textBox2.Text = &quot;&quot;; &#125; /*存款*/ private void button3_Click(object sender, EventArgs e) &#123; string ID = textBox1.Text; string Money = textBox2.Text; BLL.bll bll = new BLL.bll(); int uu = bll.Storage(ID,Money); if(uu==0) &#123; MessageBox.Show(&quot;存款成功&quot;); &#125; if (uu == 1) &#123; MessageBox.Show(&quot;请输入要储存的金额&quot;); &#125; //int uu=bll. &#125; /*转账*/ private void button4_Click(object sender, EventArgs e) &#123; string ID = textBox1.Text; string YouID = textBox2.Text; string Ta = textBox3.Text; BLL.bll bll = new BLL.bll(); int uu = bll.T_accounts(ID,YouID,Ta); if (uu==0) &#123; MessageBox.Show(&quot;要转账的金额不能大于余额&quot;); &#125;if(uu==1) &#123; MessageBox.Show(&quot;转账成功&quot;); &#125;if(uu==2) &#123; MessageBox.Show(&quot;不存在这个卡号或金额不能为空&quot;); &#125; &#125; /*鼠标进入控件事件*/ private void button4_MouseEnter(object sender, EventArgs e) &#123; label2.Text = &quot;对方卡号：&quot;; label2.Visible = true; textBox2.Visible = true; label3.Text = &quot;金额：&quot;; label3.Visible = true; textBox3.Visible = true; textBox3.Width=100; textBox3.Height=21; &#125; /*鼠标进入控件事件*/ private void button2_MouseEnter(object sender, EventArgs e) &#123; label2.Text = &quot;金额：&quot;; label2.Visible = true; label3.Visible = false; textBox3.Visible = false; textBox2.Visible = true; &#125; private void textBox2_KeyPress(object sender, KeyPressEventArgs e) &#123; if (e.KeyChar &gt; 0x20) &#123; try &#123; double.Parse(((TextBox)sender).Text + e.KeyChar.ToString()); &#125; catch &#123; e.KeyChar = (char)0; //处理非法字符 &#125; &#125; &#125; private void textBox3_KeyPress(object sender, KeyPressEventArgs e) &#123; if (e.KeyChar &gt; 0x20) &#123; try &#123; double.Parse(((TextBox)sender).Text + e.KeyChar.ToString()); &#125; catch &#123; e.KeyChar = (char)0; //处理非法字符 &#125; &#125; &#125; private void button3_MouseEnter(object sender, EventArgs e) &#123; label2.Text = &quot;金额：&quot;; label2.Visible = true; label3.Visible = false; textBox3.Visible = false; textBox2.Visible = true; &#125; private void button5_Click(object sender, EventArgs e) &#123; //textBox3.Size=(201, 67); string ID = textBox1.Text; model mm = new model(); BLL.bll bll = new BLL.bll(); string uu= bll.Record(ID); textBox3.Text= uu; &#125; private void button6_Click(object sender, EventArgs e) &#123; this.Close(); &#125; private void button5_MouseEnter(object sender, EventArgs e) &#123; label2.Visible = false; textBox2.Visible = false; label3.Text = &quot;交易记录&quot;; textBox3.Width = 201; textBox3.Height = 67; &#125; private void button5_MouseLeave(object sender, EventArgs e) &#123; textBox3.Text = &quot;&quot;; &#125; private void Form3_FormClosed(object sender, FormClosedEventArgs e) &#123; System.Environment.Exit(0); //关闭程序 &#125; &#125;&#125;]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>csharp三层架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java 抽象类的实现与具体解析 抽象类与接口系列之一]]></title>
    <url>%2F2019%2Fjava%2Fjava-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%85%B7%E4%BD%93%E8%A7%A3%E6%9E%90-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80%2F</url>
    <content type="text"><![CDATA[先有一个前提，抽象类一般是用来做什么用的 我的理解是在一些复杂的项目中，都用到一个方法暂且叫“方法1” 要怎样能统一使用这个“方法1”且方法都能很好的解决问题。 这是抽象类场景应用。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package java_10;public class java_10_1 &#123; public static void main(String[] args) &#123; // TODO 自动生成的方法存根 // A1 a=new A1(); 错误，因为抽象类不能实例化，没有价值的 C1 c = new C1(); // C1 是具体类，是有价值的 c.meth_Abstract1(); D1 d1 = new D1(); d1.meth_Abstract2(); d1.meth_Abstract3(); &#125;&#125;// 具体类是 对一个类的抽象，可以实例化。// 抽象类是 对多个类的抽象，不能实例化。abstract class A1 // abstract 用来修饰一个抽象类&#123;&#125; abstract class B1 // 抽象方法：有两个特点 &#123; //1.在定义方法时用abstract 来修饰 //2.且抽象方法没有方法体 public abstract void meth_Abstract1();&#125;abstract class B2 &#123; // public abstract static void meth_Abstract3(); 报错 static不能与 abstract // extends 同时使用 public abstract void meth_Abstract2(); public abstract void meth_Abstract3();&#125;class C1 extends B1 // 抽象类的价值，要求定义出它的派生类，且为具体类&#123; @Override public void meth_Abstract1() &#123; // TODO 自动生成的方法存根 System.out.println(&quot; C1 extends B1 &quot;); &#125;&#125;class D1 extends B2 &#123; @Override public void meth_Abstract2() &#123; // TODO 自动生成的方法存根 System.out.println(&quot;Test1_能不能写多个子类&quot;); &#125; public void meth_Abstract3() &#123; // TODO 自动生成的方法存根 System.out.println(&quot;Test2_能不能写多个子类&quot;); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java抽象类与接口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[csharpATM之功能篇（存钱，取钱，转账，交易明细）完结篇]]></title>
    <url>%2F2019%2Fc%2FcsharpATM%E4%B9%8B%E5%8A%9F%E8%83%BD%E7%AF%87%EF%BC%88%E5%AD%98%E9%92%B1%EF%BC%8C%E5%8F%96%E9%92%B1%EF%BC%8C%E8%BD%AC%E8%B4%A6%EF%BC%8C%E4%BA%A4%E6%98%93%E6%98%8E%E7%BB%86%EF%BC%89%E5%AE%8C%E7%BB%93%E7%AF%87%2F</url>
    <content type="text"><![CDATA[c#ATM之功能篇（存钱，取钱，转账，交易明细）完结篇带详细注释。一共七个功能，不难，代码还有优化空间，之后再发一篇ATM之优化篇。 首先先添加一条命名空间 1using System.Data.SqlClient; 123456789101112public Form3() &#123; InitializeComponent(); &#125; public Form3(string str)//构造一个函数用来接收来自Form1的卡号 &#123; InitializeComponent(); textBox1.Text = str; //MessageBox.Show(str);打印从form1传来的参数 验证是不是登录时的卡号 &#125; 1， button1查询余额的功能 1234567891011121314151617181920private void button1_Click(object sender, EventArgs e) &#123; //连接数据库字符串 string count = &quot;SERVER=.;DATABASE=OX;USER=SA;PWD=1;Integrated Security=True;&quot;; //执行sql语句 string sql = &quot;select * from DATA where ID=&apos;&quot; + textBox1.Text.Trim() + &quot;&apos;&quot;; SqlConnection con = new SqlConnection(count); con.Open(); //创建操作对象cmd SqlCommand cmd = new SqlCommand(sql, con); SqlDataReader dr = cmd.ExecuteReader(); if (dr.HasRows) &#123; dr.Read(); //读取余额填充到textBox2.Text中 textBox2.Text = dr[&quot;MORY&quot;].ToString().Trim(); //有打开就要有关闭哦 dr.Close(); con.Close(); &#125; 2， button2取钱功能 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364//取钱的功能：→要判断自己有多少钱，能取的钱不能大于自己的本金，钱不能取负数private void button2_Click(object sender, EventArgs e) &#123; //先判断textBox2.Text等不等于空，不等于空就执行else里面的语块句 if (textBox2.Text==&quot;&quot;) &#123; MessageBox.Show(&quot;请输入金额&quot;); &#125; else &#123; string count = &quot;SERVER=.;DATABASE=OX;USER=SA;PWD=1;Integrated Security=True;&quot;; string sql01 = &quot;select * from DATA where ID=&apos;&quot; + textBox1.Text.Trim() + &quot;&apos;&quot;; SqlConnection con01 = new SqlConnection(count); con01.Open(); SqlCommand cmd01 = new SqlCommand(sql01, con01); SqlDataReader dr01 = cmd01.ExecuteReader(); dr01.Read(); //Convert.表示强制转换的意思 ToInt32表示类型 类型可以换 int i = Convert.ToInt32(dr01[&quot;mory&quot;].ToString().Trim()); //将string类型的文本框强制转换成int类型，思考一下，不用这类强制转换，还有哪些方法可以强制转换 int j = Convert.ToInt32(textBox2.Text); int k = i - j; int txt = Convert.ToInt32(textBox2.Text); dr01.Close(); if (txt &gt; i | txt &lt; 0) &#123; MessageBox.Show(&quot;取出来的钱不能大于本金或为负数&quot;, &quot;温馨提示&quot;); &#125; else &#123; //原来的本金减去要取出来的金额 //先读取原来的本金为i,再获得取款の为j 即i-j=k 输入数据库 ， string NOW = &quot;&quot;;//先申明一个空变量来接收时间信息 string count01 = &quot;server=.;database=ox;user=sa;pwd=1;Integrated Security=True;&quot;; string sql = &quot;select * from DATA&quot;; SqlConnection con = new SqlConnection(count); con.Open(); SqlCommand cmd = new SqlCommand(sql, con); SqlDataReader dr = cmd.ExecuteReader(); if (dr.HasRows) &#123; dr.Read(); /*-----------先读取之前转账的信息------------*/ NOW = dr[&quot;RECORD&quot;].ToString().Trim(); dr.Close(); con.Close(); &#125; /*------插入储存信息格式------*/ NOW += DateTime.Now.Year + &quot;/&quot; + DateTime.Now.Month + &quot;/&quot; + DateTime.Now.Day + &quot;/&quot; + DateTime.Now.Hour + &quot;/&quot; + DateTime.Now.Minute + &quot;/&quot; + DateTime.Now.Second; NOW += &quot;我方卡号：&quot; + textBox1.Text; NOW += &quot; 金额：&quot; + textBox2.Text + &quot;元 &quot; + &quot;已取出&quot;; string sql02 = &quot;update DATA set mory=&apos;&quot; + k + &quot;&apos;,RECORD=&apos;&quot; + NOW + &quot;&apos;where ID=&apos;&quot; + textBox1.Text.Trim() + &quot;&apos;&quot;; SqlConnection con02 = new SqlConnection(count01); con02.Open(); SqlCommand cmd02 = new SqlCommand(sql02, con02); SqlDataReader dr02 = cmd02.ExecuteReader(); dr02.Read(); MessageBox.Show(&quot;取款成功&quot;); dr02.Close(); con02.Close(); &#125; &#125; &#125; 3， textBox2_KeyPress屏蔽要字母，有这段代码就是文本框里面不能输入字母和符号 123456789101112131415private void textBox2_KeyPress(object sender, KeyPressEventArgs e) &#123; if (e.KeyChar &gt; 0x20) &#123; try &#123; double.Parse(((TextBox)sender).Text + e.KeyChar.ToString()); &#125; catch &#123; e.KeyChar = (char)0; //处理非法字符 &#125; &#125; &#125; 4， textBox3_KeyPress屏蔽要字母，有这段代码就是文本框里面不能输入字母和符号 1234567891011121314private void textBox3_KeyPress(object sender, KeyPressEventArgs e) &#123; if (e.KeyChar &gt; 0x20) &#123; try &#123; double.Parse(((TextBox)sender).Text + e.KeyChar.ToString()); &#125; catch &#123; e.KeyChar = (char)0; //处理非法字符 &#125; &#125; &#125; 5， textBox4_KeyPress屏蔽要字母，有这段代码就是文本框里面不能输入字母和符号 1234567891011121314private void textBox4_KeyPress(object sender, KeyPressEventArgs e) &#123; if (e.KeyChar &gt; 0x20) &#123; try &#123; double.Parse(((TextBox)sender).Text + e.KeyChar.ToString()); &#125; catch &#123; e.KeyChar = (char)0; //处理非法字符 &#125; &#125; &#125; 6， button3存钱功能 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960private void button3_Click(object sender, EventArgs e) &#123; int txt = Convert.ToInt32(textBox2.Text); if (txt &lt; 0) &#123; MessageBox.Show(&quot;不能存小于0的金额&quot;); &#125; else &#123; string NOW=&quot;&quot;; string count = &quot;server=.;database=ox;user=sa;pwd=1;Integrated Security=True;&quot;; string sql = &quot;select * from DATA&quot;; SqlConnection con = new SqlConnection(count); con.Open(); SqlCommand cmd = new SqlCommand(sql, con); SqlDataReader dr = cmd.ExecuteReader(); if (dr.HasRows) &#123; dr.Read(); /*-----------先读取之前转账的信息------------*/ NOW = dr[&quot;RECORD&quot;].ToString().Trim(); //NOW1 = dr[&quot;RECORD&quot;].ToString().Trim(); &#125; dr.Close(); con.Close(); /*------插入储存信息格式------*/ NOW += DateTime.Now.Year + &quot;/&quot; + DateTime.Now.Month + &quot;/&quot; + DateTime.Now.Day + &quot;/&quot; + DateTime.Now.Hour + &quot;/&quot; + DateTime.Now.Minute + &quot;/&quot; + DateTime.Now.Second; NOW += &quot;我方卡号：&quot; + textBox1.Text; NOW += &quot; 金额：&quot; + textBox2.Text + &quot;元 &quot; + &quot;已存入&quot;; /*-----------先判断自己有多少本金再加上要存储的金额------等这些计算好了在存进数据中-------*/ string count01 = &quot;SERVER=.;DATABASE=OX;USER=SA;PWD=1;Integrated Security=True;&quot;; string sql01 = &quot;select * from DATA where ID=&apos;&quot; + textBox1.Text.Trim() + &quot;&apos;&quot;; SqlConnection con01 = new SqlConnection(count01); con01.Open(); SqlCommand cmd01 = new SqlCommand(sql01, con01); SqlDataReader dr01 = cmd01.ExecuteReader(); dr01.Read(); int i = Convert.ToInt32(dr01[&quot;mory&quot;].ToString().Trim());//读取自己的账户有多少钱 int j = Convert.ToInt32(textBox2.Text);//接受要储存的金额 int k = i + j;//本金加要储存的金额 dr01.Close(); con01.Close(); /*------------------------*/ string sql02 = &quot;update DATA set mory=&apos;&quot; + k + &quot;&apos;,RECORD=&apos;&quot;+NOW+&quot;&apos;where ID=&apos;&quot; + textBox1.Text.Trim() + &quot;&apos;&quot;; SqlConnection con02 = new SqlConnection(count); con02.Open(); SqlCommand cmd02 = new SqlCommand(sql02, con02); if (cmd02.ExecuteNonQuery() &gt; 0) &#123; MessageBox.Show(&quot;储存成功&quot;); &#125; else &#123; MessageBox.Show(&quot;Test&quot;); &#125; con02.Close(); &#125; &#125; 7.，button4转账功能 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105private void button4_Click(object sender, EventArgs e) &#123; if (textBox4.Text==&quot;&quot;&amp;textBox3.Text==&quot;&quot;) &#123; MessageBox.Show(&quot;请输入转账信息&quot;); &#125; else &#123; textBox3.Visible = true; label3.Visible = true; textBox4.Visible = true; label4.Visible = true; int i2, text2, text4; if (true) &#123; string count = &quot;SERVER=.;USER=SA;PWD=1;DATABASE=OX;Integrated Security=True;&quot;; string sql = &quot;select * from DATA where ID=&apos;&quot; + textBox1.Text + &quot;&apos;&quot;; SqlConnection cno = new SqlConnection(count); SqlCommand cmd = new SqlCommand(sql, cno); cno.Open(); SqlDataReader dr = cmd.ExecuteReader(); dr.Read(); //I1-TXT=自己账号的本金更新数据 txt+i2=对方的本金 更新数据 int i1 = Convert.ToInt32(dr[&quot;mory&quot;].ToString().Trim());//获取自己的本金 i2 = i1; dr.Close(); cno.Close(); //text4 = textBox4.Text; int txt4 = Convert.ToInt32(textBox4.Text);//要转账的金额 int txt2 = Convert.ToInt32(textBox2.Text); text2 = txt2; text4 = txt4; &#125; if (/*text2 &gt; i2 | text2 &lt; 0 |*/ text4 &gt; i2 | text4 &lt; 0) &#123; MessageBox.Show(&quot;取出来的钱不能大于本金或为负数&quot;, &quot;温馨提示&quot;); &#125; else &#123; string NOW = &quot;&quot;; string NOW1 = &quot;&quot;; //MessageBox.Show(NOW); string count = &quot;server=.;database=ox;user=sa;pwd=1;Integrated Security=True;&quot;; string sql = &quot;select * from DATA&quot;; SqlConnection con = new SqlConnection(count); con.Open(); SqlCommand cmd = new SqlCommand(sql, con); SqlDataReader dr = cmd.ExecuteReader(); if (dr.HasRows) &#123; dr.Read(); /*-----------先读取之前转账的信息------------*/ NOW = dr[&quot;RECORD&quot;].ToString().Trim(); NOW1 = dr[&quot;RECORD&quot;].ToString().Trim(); &#125; dr.Close(); con.Close(); //----------储存转账信息------------ NOW += DateTime.Now.Year + &quot;/&quot; + DateTime.Now.Month + &quot;/&quot; + DateTime.Now.Day + &quot;/&quot; + DateTime.Now.Hour + &quot;/&quot; + DateTime.Now.Minute + &quot;/&quot; + DateTime.Now.Second; NOW += &quot;对方卡号：&quot; + textBox3.Text; NOW += &quot;金额：&quot; + text4 + &quot;元 &quot; + &quot;已转入&quot;; /*-----------先判断要存进多少钱，然后自己的账户减多少钱和对方账户加多少钱------等这些计算好了在存进数据中-------*/ string count01 = &quot;SERVER=.;USER=SA;PWD=1;DATABASE=OX;Integrated Security=True;&quot;; string sql01 = &quot;select * from DATA where ID=&apos;&quot; + textBox3.Text + &quot;&apos;&quot;; SqlConnection cno01 = new SqlConnection(count01); cno01.Open(); SqlCommand cmd01 = new SqlCommand(sql01, cno01); SqlDataReader dr01 = cmd01.ExecuteReader(); dr01.Read(); int i3 = Convert.ToInt32(dr01[&quot;mory&quot;].ToString().Trim());//获取对方账号的本金 dr01.Close(); cno01.Close(); int j = i2 - text4;//减去转账的金额等于剩下自己的本金 string count02 = &quot;SERVER=.;USER=SA;PWD=1;DATABASE=OX;Integrated Security=True;&quot;; string sql02 = &quot;update DATA set mory=&apos;&quot; + j + &quot;&apos; ,RECORD=&apos;&quot; + NOW + &quot;&apos; where ID=&apos;&quot; + textBox1.Text + &quot;&apos;&quot;; //string sql = &quot;select count(*) from yonghu where yname=&apos;&quot; + textBox4.Text + &quot;&apos; and ypwd=&apos;&quot; + textBox5.Text + &quot;&apos;&quot;; //插入信息 SqlConnection cno02 = new SqlConnection(count02); cno02.Open(); SqlCommand cmd02 = new SqlCommand(sql02, cno02); int n = cmd02.ExecuteNonQuery(); dr01.Close(); NOW1 = DateTime.Now.Year + &quot;/&quot; + DateTime.Now.Month + &quot;/&quot; + DateTime.Now.Day + &quot;/&quot; + DateTime.Now.Hour + &quot;/&quot; + DateTime.Now.Minute + &quot;/&quot; + DateTime.Now.Second; NOW1 += &quot;对方卡号：&quot; + textBox3.Text; NOW1 += &quot;金额：&quot; + text4 + &quot;元 &quot; + &quot;已转出&quot;; int k = i3 + text4;//加上转账过来的金额等于自己的本金 string count03 = &quot;SERVER=.;USER=SA;PWD=1;DATABASE=OX;&quot;; string sql03 = &quot;update DATA set mory=&apos;&quot; + k + &quot;&apos;, RECORD=&apos;&quot; + NOW1 + &quot;&apos; where ID=&apos;&quot; + textBox3.Text + &quot;&apos;&quot;; SqlConnection cno03 = new SqlConnection(count03); cno03.Open(); SqlCommand cmd03 = new SqlCommand(sql03, cno03); if (cmd03.ExecuteNonQuery() &gt; 0) &#123; MessageBox.Show(&quot;转账成功&quot;); &#125; else &#123; MessageBox.Show(&quot;Test&quot;); &#125; &#125; &#125; &#125; 8， button5交易明细 12345678910111213141516171819202122private void button5_Click(object sender, EventArgs e) &#123; textBox3.Visible = true; label3.Visible = true; textBox4.Visible = true; label4.Visible = true; textBox5.Visible = true; //MessageBox.Show(NOW); string count = &quot;server=.;database=ox;user=sa;pwd=1;Integrated Security=True;&quot;; string sql = &quot;select * from DATA&quot;; SqlConnection con = new SqlConnection(count); con.Open(); SqlCommand cmd = new SqlCommand(sql,con); SqlDataReader dr = cmd.ExecuteReader(); if (dr.HasRows) &#123; dr.Read(); textBox5.Text = dr[&quot;RECORD&quot;].ToString().Trim(); dr.Close(); &#125; con.Close(); &#125; 9， button6返回登录界面 123456private void button6_Click(object sender, EventArgs e) &#123; this.Close(); Form1 f1 = new Form1(); f1.Show(); &#125; csharp_ATM之登录篇 charp_ATM之找回密码篇]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>csharpATM之功能篇（存钱，取钱，转账，交易明细）完结篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[csharp_ATM之找回密码篇]]></title>
    <url>%2F2019%2Fc%2Fcsharp_ATM%E4%B9%8B%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E7%AF%87%2F</url>
    <content type="text"><![CDATA[1.先添加一行命名空间，如果没有这一行代码，下面的代码绝对会出错 1using System.Data.SqlClient;` 1234567891011public Form2() &#123; InitializeComponent(); &#125; Form1 f01; public Form2(Form1 f1)//隐藏父窗体，然后通过but2 show出来 &#123; InitializeComponent(); f01 = f1; &#125; 2.为textBox3设置密码掩字符 1234private void textBox3_TextChanged(object sender, EventArgs e) &#123; textBox3.PasswordChar = &apos;*&apos;; &#125; 3.验证卡号与凭证是否匹配 1234567891011121314151617181920212223242526272829303132333435private void button1_Click(object sender, EventArgs e) &#123; if (textBox1.Text == &quot;&quot; &amp; textBox2.Text == &quot;&quot; &amp; textBox3.Text == &quot;&quot;) &#123; MessageBox.Show(&quot;不能留空哦&quot;); &#125; else &#123; string count = &quot;SERVER=.;DATABASE=OX;USER=SA;PWD=1;&quot;; //string sql= &quot;update server set pwd=&apos;&quot; + textBox3.Text.Trim() + &quot;&apos;where sno=&apos;&quot;+textBox1.Text+&quot;&apos;where sfz=&apos;&quot;+textBox2.Text+&quot;&apos;&quot;; string sql = &quot;update USERR set pwd=&apos;&quot; + textBox3.Text + &quot;&apos;where ID=&apos;&quot; + textBox1.Text.Trim() + &quot;&apos;AND ID IN(SELECT ID FROM DATA WHERE SFZ=&apos;&quot;+textBox2.Text+&quot;&apos;)&quot;; //UPDATE USERR SET PWD=&apos;12&apos; WHERE ID=&apos;123&apos; AND ID IN(SELECT ID FROM DATA WHERE SFZ=&apos;9876&apos;) SqlConnection con = new SqlConnection(count);//创建连接对象 con.Open(); SqlCommand cmd = new SqlCommand(sql, con);//创建操作对象 if (cmd.ExecuteNonQuery()&gt;0) &#123; MessageBox.Show(&quot;修改成功&quot;); Form1 f1 = new Form1(); this.button1.Visible = true; //this.button2.Visible = true; this.textBox1.Visible = true; this.textBox2.Visible = true; this.label1.Visible = true; this.label2.Visible = true; this.label3.Visible = true; f01.Hide(); f1.Show(); &#125; else &#123; MessageBox.Show(&quot;修改失败&quot;); &#125; &#125; &#125; 第一篇介绍 csharp_ATM之登录篇最后一篇介绍：csharpATM之功能篇（存钱，取钱，转账，交易明细）完结篇]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>csharp之模拟ATm机（取钱，存钱，转账，交易明细）登陆篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[csharp_ATM之登录篇]]></title>
    <url>%2F2019%2Fc%2Fcsharp_ATM%E4%B9%8B%E7%99%BB%E5%BD%95%E7%AF%87%2F</url>
    <content type="text"><![CDATA[c#ATM之登录篇一共三个窗体，一个作为父窗体，另外两个设为子窗体。Form1为父窗体，Form2为子窗体，Form3为子窗体。 Form2作为修改密码的窗体，Form3作为ATM的功能实现。 先说一下思路：首先需要验证一下自己的账号和密码对不对，验证成功的话就进入下一个界面。先给你看数据库表怎么设计↓↓表名：ox先新建两个表↓这是表DATA中的数据类型↓ 这是表DATA中的内容↓ 这是表USERR中的数据类型↑ 这是表USERR中的内容↓ 这是登录界面↓↓ 代码如下↓↓ 2.0//先添加一条命名空间 1using System.Data.SqlClient; 2.1//先设这个窗体为父窗体 12345public Form1() &#123; InitializeComponent(); IsMdiContainer = true;//先设这个窗体为父窗体 &#125; 2.2//设置登录按钮的功能 12345678910111213141516171819202122232425262728293031323334353637383940private void button1_Click(object sender, EventArgs e) &#123; string count = &quot;SERVER=.;DATABASE=OX;USER=SA;PWD=1;Integrated Security=True&quot;;//连接数据库字符串 //执行sql语句 string sql = &quot;SELECT * FROM USERR WHERE ID=&apos;&quot; + textBox1.Text.Trim() + &quot;&apos;&quot;; SqlConnection con = new SqlConnection(count); SqlCommand cmd = new SqlCommand(sql,con); con.Open(); //读取数据库表中的内容 SqlDataReader dr = cmd.ExecuteReader(); if (dr.HasRows) &#123; dr.Read();//有打开阅读就有关闭 if (textBox2.Text == dr[&quot;PWD&quot;].ToString().Trim())//用dr来验证密码框输入的字符串和数据库中的字符串相不相等 &#123; MessageBox.Show(&quot;登录成功&quot;); //——————登录成功后需要把这里控件隐藏起来————— textBox1.Visible = false; textBox2.Visible = false; label1.Visible = false; label2.Visible = false; label3.Visible = false; button1.Visible = false; button2.Visible = false; Form3 f3 = new Form3(textBox1.Text);//传递账号给f3 f3.MdiParent = this;//设为子窗体 f3.Show(); &#125; else MessageBox.Show(&quot;请检查密码&quot;); &#125; else &#123; MessageBox.Show(&quot;请检查账号是否存在&quot;); &#125; con.Close(); &#125; 2.3//设置找回密码按钮的功能 123456789101112131415161718private void button2_Click(object sender, EventArgs e) &#123; Form2 f2 = new Form2(this); this.button1.Visible = false; this.button2.Visible = false; this.textBox1.Visible = false; this.textBox2.Visible = false; this.label1.Visible = false; this.label2.Visible = false; this.label3.Visible = false; f2.MdiParent = this; f2.Show(); &#125; private void textBox2_TextChanged(object sender, EventArgs e) &#123; textBox2.PasswordChar = &apos;*&apos;;//设置密码框的掩码符 &#125; 下一篇介绍 ATM之找回密码篇 最后一篇介绍：csharpATM之功能篇（存钱，取钱，转账，交易明细）完结篇]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>csharp之模拟ATm机（取钱，存钱，转账，交易明细）登陆篇</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[csharp连接数据库的简单实现]]></title>
    <url>%2F2019%2Fc%2Fcsharp%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[控件布局如下 代码如下 12345678910111213141516171819202122232425262728293031323334353637using System.Data.SqlClient;//添加一条using命令 //双击textBox2 private void textBox2_TextChanged(object sender, EventArgs e) &#123; textBox2.UseSystemPasswordChar = true;//设置密码符 &#125; private void button1_Click(object sender, EventArgs e) &#123; string count = &quot;Server =.;user = sa; pwd = 1;Database =ox;&quot;; //连接数据库字符串 string sql = &quot;select * from student where sno=&apos;&quot; + textBox1.Text.Trim() + &quot;&apos;&quot;;//查询要登录的账号进行查询 SqlConnection con = new SqlConnection(count);//创建con 对象 SqlCommand cmd = new SqlCommand(sql, con);//创建cmd 对象 con.Open();//打开数据库 SqlDataReader dr = cmd.ExecuteReader();//读取数据库信息 try &#123; if (dr.HasRows)//读取行 &#123; dr.Read();//允许阅读 if (textBox2.Text == dr[&quot;pwd&quot;].ToString().Trim())//比较输入的密码和数据库里的密码 MessageBox.Show(&quot;登录成功&quot;);//true为成功 else MessageBox.Show(&quot;登录失败&quot;);//flash为失败 dr.Close(); &#125; &#125; catch (Exception ex)//捕捉错误，这个模块很好用，不要写成空catch（） &#123; MessageBox.Show(ex.Message.ToString()); &#125; finally //一定会执行 &#123; con.Close(); &#125; &#125; &#125; 欢迎留言交流，可私信我交流。]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>csharp连接数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[九九乘法表的四种玩法带详细注释]]></title>
    <url>%2F2019%2Fc%2F%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%8E%A9%E6%B3%95%E5%B8%A6%E8%AF%A6%E7%BB%86%E6%B3%A8%E9%87%8A-%2F</url>
    <content type="text"><![CDATA[1.最少需要一个窗体，五个Button控件，四个Label控件 思路是这样的子，一个九九乘法表是由行列组成的，要想办法控制它的行和列，以及它的空格位，才能达到完美效果。 先上效果图↓↓↓↓ 1. 控件布局如图↓↓↓↓ 2. 代码如下___仅供参考__引用，转载请说明出处____如有不完善的地方请联系我123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293//双击but1private void but1_Click(object sender, EventArgs e) &#123; string rst = &quot;&quot;; //打印1-9的数（i能取1-9之间的数），i自增 //一共9个数 for (int i = 1; i &lt; 10; i++)//控制列，一共9列，可以把10换掉自己尝试一下感觉 &#123; // &lt;当i=1，j=1的时候，j&lt;=10-(1+1) j=8，j自增&gt; // &lt;当i=2，j=2的时候，j&lt;=10-(2+1) j=7, j自增&gt; // &lt;当i=3，j=3的时候，j&lt;=10-(3+1) j=6, j自增&gt; //....以此类推 // &lt;当i=9，j=8的时候，j&lt;=10-(9+1) j=0, j自增&gt; //取值0-8,一共9个数 for (int j = 1; j &lt;= 10 - (i + 1); j++)//控制行，一共9行，可以把10换掉自己尝试一下感觉 &#123; for (int k = 1; k &lt; 8; k++)//打印1-7之间的空格数，一共7位数，循环7次 &#123; rst += &quot; &quot;; //控制空格数，一条式子最多为6位数加上一个空格数&quot;1*2=03_&quot;用_代替一个空格位 &#125; &#125; for (int j = 1; j &lt; i + 1; j++) //1*2=2 ==》j*i=（j*i）要输出的样式 &#123; rst += string.Format(&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125; &quot;, j, i, i * j &lt; 10 ? &quot; &quot;+ i * j : +i * j + &quot;&quot;); /*语法为：条件表达式？表达式1：表达式2； a=3&gt;4?3:4; 3&gt;4返回flash，把4赋值给a。 表达式1返回的布尔值位turn，表达式2返回的布尔值位flash*/ &#125; rst += &quot;\n&quot;;//换行 &#125; label1.Text = rst; &#125; //双击but2private void but2_Click(object sender, EventArgs e) &#123; string rst = &quot;&quot;; for (int i = 1; i &lt; 10; i++) &#123; for (int j = 1; j &lt; i + 1; j++) &#123; rst += string.Format(&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125; &quot;, i, j, j * i &lt; 10 ? &quot; &quot; + i * j : +i * j + &quot;&quot;); &#125; rst += &quot;\n&quot;; &#125; label2.Text = rst; &#125; //双击but3 private void but3_Click(object sender, EventArgs e) &#123; string rst = &quot;&quot;;//左上三角 for (int i = 1; i &lt; 10; i++)//行数 &#123; for (int j = i; j &lt; 10; j++)//列数 &#123; rst += string.Format(&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125; &quot;, i, j, j * i &lt; 10 ? &quot; &quot; + i * j : +i * j + &quot;&quot;); &#125; rst += &quot;\n&quot;; &#125; label3.Text = rst; &#125; //双击but4private void but4_Click(object sender, EventArgs e) &#123; string rst = &quot;&quot;; for (int i = 1; i &lt; 10; i++) &#123; for (int j = 0; j &lt; i - 1; j++) &#123; rst += &quot; &quot;; &#125; for (int j = i; j &lt; 10; j++) &#123; rst += string.Format(&quot; &#123;0&#125;*&#123;1&#125;=&#123;2&#125;&quot;, j, i, j * i &lt; 10 ? &quot; &quot; + i * j : +i * j + &quot;&quot;); &#125; rst += &quot;\n&quot;; &#125; label4.Text = rst; &#125; //双击but5 private void but5_Click(object sender, EventArgs e) &#123; label1.Text = &quot;label1&quot;; label2.Text = &quot;label2&quot;; label3.Text = &quot;label3&quot;; label4.Text = &quot;label4&quot;; &#125;]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#九乘法表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[csharp_radioButton_跨窗体传递值简单的方法]]></title>
    <url>%2F2019%2Fc%2Fcsharp_radioButton_%E8%B7%A8%E7%AA%97%E4%BD%93%E4%BC%A0%E9%80%92%E5%80%BC%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[c# radioButton 跨窗体传递值简单的方法 需要三个窗体，每个窗体里至少有两个radioButton控件 ，然后需要把 Form2，Form3 中radioButton的Modifiers属性改为 Public 接下来就是代码部分 代码部分 Form1 : Form 1234567891011121314151617private void button1_Click(object sender, EventArgs e) &#123; if (radioButton1.Checked==true)//判断radioButton1有没有被选中 &#123; Form2 f2 = new Form2();//实例化窗体 f2.Owner = this;//获取f2的窗体控件 f2.radioButton1.Checked = true;//f2的radioButton1被选中的状态为真 f2.Show();//显示f2窗体 &#125; if (radioButton2.Checked == true)//判断radioButton1有没有被选中 &#123; Form2 f2 = new Form2();//实例化窗体 f2.Owner = this;//获取f2的窗体控件 f2.radioButton2.Checked = true;//f2的radioButton2被选中的状态为真 f2.Show();//显示f2窗体 &#125; &#125; Form2 : Form 1234567891011121314151617private void button1_Click(object sender, EventArgs e) &#123; if (radioButton1.Checked==true) &#123; Form3 f3 = new Form3(); f3.Owner = this; f3.radioButton1.Checked = true; f3.Show(); &#125; if (radioButton2.Checked == true) &#123; Form3 f3 = new Form3(); f3.Owner = this; f3.radioButton2.Checked = true; f3.Show(); &#125; &#125; Form3 : Form 1Form3 只需要把界面做好就行]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#跨窗体传值</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我要搭建hexo博客,记录我搭建博客过程，也分享下]]></title>
    <url>%2F2019%2Fhexo%2F%E6%88%91%E8%A6%81%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%2C%E8%AE%B0%E5%BD%95%E6%88%91%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B%EF%BC%8C%E4%B9%9F%E5%88%86%E4%BA%AB%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[我是在win环境下运行的所以需要下载一个Git， 安装好后，鼠标右击有一个菜单Git bash Here 这是打命令行的地方。 hexo是基于node.js所以我们要下载node.js, 选择自己对应的版本。路径基本上是不建议更改的，安装就一直下一步。 下载Gitgit的一些知识扫盲打开git bash Here输入 1node -v 1npm -v 在我输入npm -v是报错了，不允许操作，困扰我不少时间，解决方法点这里 设置淘宝镜像 因为原来的地址是在国外，又没有vpn加速，所以使用阿里云的淘宝镜像，下载是一样的，速度是比国外快多了。 1npm install -g cnpm --registry=https://registry.npm.taobao.org 全局安装hexo1cnpm install -g hexo-cli 如果这句出现了 bash: cnpm: command not found换成npm install -g hexo-cli也能成。 安装完成后检验一下hexo -v会出现一推这样的信息，表示安装成功。 `hexo-cli: 2.0.0 http_parser: 2.8.0 node: 10.16.0 v8: 6.8.275.32-node.52 uv: 1.28.0 zlib: 1.2.11 brotli: 1.0.7 ares: 1.15.0 modules: 64 nghttp2: 1.34.0 napi: 4 openssl: 1.1.1b icu: 64.2 unicode: 12.1 cldr: 35.1 tz: 2019a建一个文件夹，用来储存你博客的信息，例如D:\hexo\myblog用命令行表示就是mkdir d:/hexo/myblog建好后可以打开路径看看，或者使用常用建文件夹也是可以的。 初始化你的博客进入你的博客目录 1cd d:/hexo/myblog 进行初始化 1hexo init 可以查看生成了什么目录 1ls -l 安装完成启动博客1hexo s 会出现以下的信息 12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 按住Ctrl 点击 http://localhost:4000 自动帮你打开这个页面，也就是你的博客，生成成功了。 写入文章1hexo new &quot;Myblog_Test&quot; 文章生成的路径然后我们找到这里路径修改文章。 1cd source/_posts/ #这个符号是注释用的，是给人看的，不是给机器的命令， cd sou 可以按两下tab键会自动补全 vim 上古神器，来修改文章1vim My #两下tab键自动补全 键入（键盘输入） i就可以输入内容了写完了要怎么保存退出？按一下左上角esc键键入 :wq 保存退出的意思单单:q 退出的意思 退回原来myblog目录生成文章返回原来myblog的目录12345pwd #查看当前的路径#会显示出 /d/hexo/myblog/source/_posts #返回到myblog 需要退两格 ..表示一个目录 ../.. 表示退两格目录cd ../..pwd #会显示 /d/hexo/myblog 生成文章123hexo g #生成#会出现一堆东西hexo s #启动服务 博客搭建算是完成了是不是觉得还有一个问题没有解决，自己能访问，可是如何让别人也能访问我的博客呢，别人能访问这样才有意思对吧。 有可以购买服务器，域名，这种是要花软妹币的。 还有一种不用花软妹币的方法是通过Github page 来部署我们的博客。我是采取后者也建议大家采用后者对英语不友好的同学可以使用chrome浏览器 里面有自带网页翻译，比某狗游览器好用多了 。注册github账号用户名要想好哈，，没想好，后期也可以改，但不建议。用户名例如我的Hzrj ，以后我的博客网址就是Hzrj.github.io 可以绑定域名往后看## 注册好后，新建仓库填写仓库名一定要用自己的用户名.github.io 回到git bash上 安装git插件1cnpm install --save hexo-deployer-git 配置_config.yml文件1vim _config.yml 配置文件，翻到最下面， type和branch跟着写，repo写你刚刚新建的仓库地址 部署到github上，你的博客可以被别人访问了1hexo d 部署过程中，要是有提示什么username，userpwd之类的，输入你的账号，密码就好了部署完后，出现一堆信息，结尾如下 12Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;https://github.com/Hzrj/Hzrj.github.io.git&apos;.INFO Deploy done: git 表示部署成功了，这是到github上刷新一下把你的仓库名复制到地址栏访问 如 Hzrj.github.io 如果没有出现东西，那刷新一下就应该有了。 hexo主题 更换主题1git clone https://github.com/theme-next/hexo-theme-next.git themes/next]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexod搭建博客</tag>
      </tags>
  </entry>
</search>
